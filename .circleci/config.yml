version: 2.1
orbs:
  node: circleci/node@5.0.0
jobs:
  test:
    environment:
      POSTGRES_HOST: localhost
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vincelivemix
    docker:
      - image: cimg/node:17.3.0
      - image: postgres:14.1-alpine
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
        environment:
          POSTGRES_USER: $POSTGRES_USER
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD
          POSTGRES_DB: ${OSTGRES_DB
    steps:
      - checkout
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://$POSTGRES_HOST:$POSTGRES_PORT -timeout 1m
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - persist_to_workspace:
          root: .
          paths:
            - .
      - run:
          command: npm install
      - run:
          command: npx browserslist@latest --update-db
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          command: npm run test:cov
      - run:
          name: codecov
          command: bash <(curl -s https://codecov.io/bash)
  build-and-push:
    environment:
      IMAGE_NAME: sdevilcry/vincelivemix
    docker:
      - image: cimg/node:17.3.0
    steps:
      - setup_remote_docker:
          docker_layer_caching: false # Plan is disabled
      - attach_workspace:
          at: .
      - run: |
          IMAGE_TAG="0.0.${CIRCLE_BUILD_NUM}"
          docker build -t $IMAGE_NAME:latest -f ./docker/Dockerfile .
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_LOGIN --password-stdin
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG
workflows:
  version: 2
  test-build-and-publish:
    jobs:
      - test
      - build-and-push:
          requires:
            - test
          filters:
            branches:
              only: master
